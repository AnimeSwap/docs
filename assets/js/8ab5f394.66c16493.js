"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9859],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(r),f=s,m=l["".concat(i,".").concat(f)]||l[f]||d[f]||a;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=l;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:s,o[1]=c;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},2418:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var n=r(7462),s=(r(7294),r(3905));const a={},o="Resources",c={unversionedId:"contracts/Aptos/MasterChef/masterchef_resources",id:"contracts/Aptos/MasterChef/masterchef_resources",title:"Resources",description:"",source:"@site/docs/contracts/Aptos/MasterChef/masterchef_resources.md",sourceDirName:"contracts/Aptos/MasterChef",slug:"/contracts/Aptos/MasterChef/masterchef_resources",permalink:"/docs/contracts/Aptos/MasterChef/masterchef_resources",draft:!1,editUrl:"https://github.com/AnimeSwap/docs/blob/main/docs/contracts/Aptos/MasterChef/masterchef_resources.md",tags:[],version:"current",frontMatter:{},sidebar:"contracts",previous:{title:"Entry Functions",permalink:"/docs/contracts/Aptos/MasterChef/masterchef_api"},next:{title:"Events",permalink:"/docs/contracts/Aptos/MasterChef/masterchef_event"}},i={},p=[],u={toc:p};function d(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"resources"},"Resources"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-move"},"// info of each user, store at user's address\nstruct UserInfo<phantom X> has key, store, copy {\n    amount: u64,    // `amount` LP coin amount the user has provided.\n    reward_debt: u128,    // Reward debt. See explanation below.\n    //\n    // We do some fancy math here. Basically, any point in time, the amount of ANIs\n    // entitled to a user but is pending to be distributed is:\n    //\n    //   pending reward = (user.amount * pool.acc_ANI_per_share) - user.reward_debt\n    //\n    // Whenever a user deposits or withdraws LP coins to a pool. Here's what happens:\n    //   1. The pool's `acc_ANI_per_share` (and `last_reward_timestamp`) gets updated.\n    //   2. User receives the pending reward sent to his/her address.\n    //   3. User's `amount` gets updated.\n    //   4. User's `reward_debt` gets updated.\n}\n\n// info of each pool, store at resource account address\nstruct PoolInfo<phantom X> has key, store {\n    coin_reserve: Coin<X>,\n    acc_ANI_per_share: u128,    // times ACC_ANI_PRECISION\n    last_reward_timestamp: u64,\n    alloc_point: u64,\n}\n\nstruct MasterChefData has drop, key {\n    signer_cap: SignerCapability,\n    total_alloc_point: u64,\n    admin_address: address,\n    dao_address: address,   // dao fee to address\n    dao_percent: u64,   // dao fee percent\n    last_timestamp_dao_withdraw: u64,  // Last timestamp then develeper withdraw dao fee\n    start_timestamp: u64,   // mc mint ANI start from this ts\n    per_second_ANI: u128, // default ANI per second, 1 ANI/second = 86400 ANI/day\n}\n")))}d.isMDXComponent=!0}}]);