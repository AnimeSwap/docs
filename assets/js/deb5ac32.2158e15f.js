"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[743],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>_});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),u=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},i=function(e){var n=u(e.components);return a.createElement(p.Provider,{value:n},e.children)},v={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},l=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),l=u(t),_=r,m=l["".concat(p,".").concat(_)]||l[_]||v[_]||o;return t?a.createElement(m,s(s({ref:n},i),{},{components:t})):a.createElement(m,s({ref:n},i))}));function _(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=l;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var u=2;u<o;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}l.displayName="MDXCreateElement"},8696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>v,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const o={},s="Events",c={unversionedId:"contracts/Swap/swap_events",id:"contracts/Swap/swap_events",title:"Events",description:"paircreatedevent",source:"@site/docs/contracts/Swap/swap_events.md",sourceDirName:"contracts/Swap",slug:"/contracts/Swap/swap_events",permalink:"/docs/contracts/Swap/swap_events",draft:!1,editUrl:"https://github.com/AnimeSwap/docs/blob/main/docs/contracts/Swap/swap_events.md",tags:[],version:"current",frontMatter:{},sidebar:"contracts",previous:{title:"Resources",permalink:"/docs/contracts/Swap/swap_resources"},next:{title:"Examples for contracts",permalink:"/docs/contracts/Swap/swap_examples"}},p={},u=[{value:"pair_created_event",id:"pair_created_event",level:2},{value:"mint_event",id:"mint_event",level:2},{value:"burn_event",id:"burn_event",level:2},{value:"swap_event",id:"swap_event",level:2},{value:"sync_event",id:"sync_event",level:2},{value:"flash_swap_event",id:"flash_swap_event",level:2}],i={toc:u};function v(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"events"},"Events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"struct PairInfo has key {\n    pair_list: vector<PairMeta>,\n}\n\nstruct Events<phantom X, phantom Y> has key {\n    pair_created_event: event::EventHandle<PairCreatedEvent<X, Y>>,\n    mint_event: event::EventHandle<MintEvent<X, Y>>,\n    burn_event: event::EventHandle<BurnEvent<X, Y>>,\n    swap_event: event::EventHandle<SwapEvent<X, Y>>,\n    sync_event: event::EventHandle<SyncEvent<X, Y>>,\n    flash_swap_event: event::EventHandle<FlashSwapEvent<X, Y>>,\n}\n\nstruct PairCreatedEvent<phantom X, phantom Y> has drop, store {\n    meta: PairMeta,\n}\n\nstruct MintEvent<phantom X, phantom Y> has drop, store {\n    amount_x: u64,\n    amount_y: u64,\n    liquidity: u64,\n}\n\nstruct BurnEvent<phantom X, phantom Y> has drop, store {\n    amount_x: u64,\n    amount_y: u64,\n    liquidity: u64,\n}\n\nstruct SwapEvent<phantom X, phantom Y> has drop, store {\n    amount_x_in: u64,\n    amount_y_in: u64,\n    amount_x_out: u64,\n    amount_y_out: u64,\n}\n\nstruct SyncEvent<phantom X, phantom Y> has drop, store {\n    reserve_x: u64,\n    reserve_y: u64,\n    last_price_x_cumulative: u128,\n    last_price_y_cumulative: u128,\n}\n\nstruct FlashSwapEvent<phantom X, phantom Y> has drop, store {\n    loan_coin_x: u64,\n    loan_coin_y: u64,\n    repay_coin_x: u64,\n    repay_coin_y: u64,\n}\n")),(0,r.kt)("h2",{id:"pair_created_event"},"pair_created_event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"let pair_meta = get_pair_meta<X, Y>();\nevent::emit_event(&mut events.pair_created_event, PairCreatedEvent {\n    meta: pair_meta,\n});\n")),(0,r.kt)("h2",{id:"mint_event"},"mint_event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"event::emit_event(&mut events.mint_event, MintEvent {\n    amount_x,\n    amount_y,\n    liquidity,\n});\n")),(0,r.kt)("h2",{id:"burn_event"},"burn_event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"event::emit_event(&mut events.burn_event, BurnEvent {\n    amount_x,\n    amount_y,\n    liquidity,\n});\n")),(0,r.kt)("h2",{id:"swap_event"},"swap_event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"event::emit_event(&mut events.swap_event, SwapEvent {\n    amount_x_in,\n    amount_y_in,\n    amount_x_out,\n    amount_y_out,\n});\n")),(0,r.kt)("h2",{id:"sync_event"},"sync_event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"event::emit_event(&mut events.sync_event, SyncEvent {\n    reserve_x,\n    reserve_y,\n    last_price_x_cumulative,\n    last_price_y_cumulative,\n});\n")),(0,r.kt)("h2",{id:"flash_swap_event"},"flash_swap_event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"event::emit_event(&mut events.flash_swap_event, FlashSwapEvent {\n    loan_coin_x,\n    loan_coin_y,\n    repay_coin_x,\n    repay_coin_y,\n});\n")))}v.isMDXComponent=!0}}]);