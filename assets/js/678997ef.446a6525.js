"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9255],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>s});var i=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,i,o=function(n,e){if(null==n)return{};var t,i,o={},a=Object.keys(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var u=i.createContext({}),c=function(n){var e=i.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},p=function(n){var e=c(n.components);return i.createElement(u.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},_=i.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,u=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),_=c(t),s=o,d=_["".concat(u,".").concat(s)]||_[s]||m[s]||a;return t?i.createElement(d,r(r({ref:e},p),{},{components:t})):i.createElement(d,r({ref:e},p))}));function s(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,r=new Array(a);r[0]=_;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l.mdxType="string"==typeof n?n:o,r[1]=l;for(var c=2;c<a;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}_.displayName="MDXCreateElement"},916:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=t(7462),o=(t(7294),t(3905));const a={},r="Entry Functions",l={unversionedId:"contracts/Sui/Swap/swap_api",id:"contracts/Sui/Swap/swap_api",title:"Entry Functions",description:"addliquidityentry",source:"@site/docs/contracts/Sui/Swap/swap_api.md",sourceDirName:"contracts/Sui/Swap",slug:"/contracts/Sui/Swap/swap_api",permalink:"/docs/contracts/Sui/Swap/swap_api",draft:!1,editUrl:"https://github.com/AnimeSwap/docs/blob/main/docs/contracts/Sui/Swap/swap_api.md",tags:[],version:"current",frontMatter:{},sidebar:"contracts",previous:{title:"Overview",permalink:"/docs/contracts/Sui/contracts"},next:{title:"Resources",permalink:"/docs/contracts/Sui/Swap/swap_resources"}},u={},c=[{value:"add_liquidity_entry",id:"add_liquidity_entry",level:2},{value:"remove_liquidity_entry",id:"remove_liquidity_entry",level:2},{value:"swap_exact_coins_for_coins_entry",id:"swap_exact_coins_for_coins_entry",level:2},{value:"swap_coins_for_exact_coins_entry",id:"swap_coins_for_exact_coins_entry",level:2}],p={toc:c};function m(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,i.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"entry-functions"},"Entry Functions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun add_liquidity_entry<X, Y>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coin_x_origin: Coin<X>,\n    coin_y_origin: Coin<Y>,\n    amount_x_desired: u64,\n    amount_y_desired: u64,\n    amount_x_min: u64,\n    amount_y_min: u64,\n    ctx: &mut TxContext,\n);\npublic entry fun remove_liquidity_entry<X, Y>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    liquidity: Coin<LPCoin<X, Y>>,\n    liquidity_desired: u64,\n    amount_x_min: u64,\n    amount_y_min: u64,\n    ctx: &mut TxContext,\n);\npublic entry fun swap_exact_coins_for_coins_entry<X, Y>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coins_in_origin: Coin<X>,\n    amount_in: u64,\n    amount_out_min: u64,\n    ctx: &mut TxContext,\n);\npublic entry fun swap_exact_coins_for_coins_2_pair_entry<X, Y, Z>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coins_in_origin: Coin<X>,\n    amount_in: u64,\n    amount_out_min: u64,\n    ctx: &mut TxContext,\n);\npublic entry fun swap_coins_for_exact_coins_entry<X, Y>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coins_in_origin: Coin<X>,\n    amount_out: u64,\n    amount_in_max: u64,\n    ctx: &mut TxContext,\n);\npublic entry fun swap_coins_for_exact_coins_2_pair_entry<X, Y, Z>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coins_in_origin: Coin<X>,\n    amount_out: u64,\n    amount_in_max: u64,\n    ctx: &mut TxContext,\n);\n")),(0,o.kt)("h2",{id:"add_liquidity_entry"},"add_liquidity_entry"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun add_liquidity_entry<X, Y>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coin_x_origin: Coin<X>,\n    coin_y_origin: Coin<Y>,\n    amount_x_desired: u64,\n    amount_y_desired: u64,\n    amount_x_min: u64,\n    amount_y_min: u64,\n    ctx: &mut TxContext,\n);\n")),(0,o.kt)("p",null,"Add liquidity for ",(0,o.kt)("inlineCode",{parentName:"p"},"X")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Y")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"If pair not exist, transaction will auto ",(0,o.kt)("strong",{parentName:"p"},"Create Pair first"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If pair not exist, it will create pair and add initial liquidity, that is to say, create coin ",(0,o.kt)("inlineCode",{parentName:"li"},"LPCoin<X, Y>")),(0,o.kt)("li",{parentName:"ul"},"At least ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_x_min")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_y_min")," will be added to liquidity, otherwise tx will fail"),(0,o.kt)("li",{parentName:"ul"},"CoinType order not matters, but ",(0,o.kt)("inlineCode",{parentName:"li"},"X")," should match ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_x_desired")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_x_min"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"Y")," should match ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_y_desired")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_y_min")),(0,o.kt)("li",{parentName:"ul"},"Emit ",(0,o.kt)("inlineCode",{parentName:"li"},"pair_created_event"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"mint_event"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"sync_event"))),(0,o.kt)("h2",{id:"remove_liquidity_entry"},"remove_liquidity_entry"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun remove_liquidity_entry<X, Y>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    liquidity: Coin<LPCoin<X, Y>>,\n    liquidity_desired: u64,\n    amount_x_min: u64,\n    amount_y_min: u64,\n    ctx: &mut TxContext,\n);\n")),(0,o.kt)("p",null,"Remove liquidity for ",(0,o.kt)("inlineCode",{parentName:"p"},"X")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Y")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Require pair exists, otherwise tx will fail"),(0,o.kt)("li",{parentName:"ul"},"Burn ",(0,o.kt)("inlineCode",{parentName:"li"},"liquidity")," amount ",(0,o.kt)("inlineCode",{parentName:"li"},"LPCoin<X, Y>")),(0,o.kt)("li",{parentName:"ul"},"At least ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_x_min")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_y_min")," is returned, otherwise tx will fail"),(0,o.kt)("li",{parentName:"ul"},"CoinType order not matters, but ",(0,o.kt)("inlineCode",{parentName:"li"},"X")," should match ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_x_min"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"Y")," should match ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_y_min")),(0,o.kt)("li",{parentName:"ul"},"Emit ",(0,o.kt)("inlineCode",{parentName:"li"},"burn_event"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"sync_event"))),(0,o.kt)("h2",{id:"swap_exact_coins_for_coins_entry"},"swap_exact_coins_for_coins_entry"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun swap_exact_coins_for_coins_entry<X, Y>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coins_in_origin: Coin<X>,\n    amount_in: u64,\n    amount_out_min: u64,\n    ctx: &mut TxContext,\n);\npublic entry fun swap_exact_coins_for_coins_2_pair_entry<X, Y, Z>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coins_in_origin: Coin<X>,\n    amount_in: u64,\n    amount_out_min: u64,\n    ctx: &mut TxContext,\n);\n")),(0,o.kt)("p",null,"Swap ",(0,o.kt)("inlineCode",{parentName:"p"},"X")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"CoinTypeW"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"CoinTypeW")," is the last type-arg"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Require all pairs exist, otherwise tx will fail"),(0,o.kt)("li",{parentName:"ul"},"Input exact ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_in")," ",(0,o.kt)("inlineCode",{parentName:"li"},"X")," and output at least ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_out_min")," ",(0,o.kt)("inlineCode",{parentName:"li"},"CoinTypeW")),(0,o.kt)("li",{parentName:"ul"},"Emit ",(0,o.kt)("inlineCode",{parentName:"li"},"swap_event"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"sync_event"))),(0,o.kt)("h2",{id:"swap_coins_for_exact_coins_entry"},"swap_coins_for_exact_coins_entry"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun swap_coins_for_exact_coins_entry<X, Y>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coins_in_origin: Coin<X>,\n    amount_out: u64,\n    amount_in_max: u64,\n    ctx: &mut TxContext,\n);\npublic entry fun swap_coins_for_exact_coins_2_pair_entry<X, Y, Z>(\n    lps: &mut LiquidityPools,\n    clock: &Clock,\n    coins_in_origin: Coin<X>,\n    amount_out: u64,\n    amount_in_max: u64,\n    ctx: &mut TxContext,\n);\n")),(0,o.kt)("p",null,"Swap ",(0,o.kt)("inlineCode",{parentName:"p"},"X")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"CoinTypeW"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"CoinTypeW")," is the last type-arg"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Require all pairs exist, otherwise tx will fail"),(0,o.kt)("li",{parentName:"ul"},"Input at least ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_in")," ",(0,o.kt)("inlineCode",{parentName:"li"},"X")," and output exact ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_out_min")," ",(0,o.kt)("inlineCode",{parentName:"li"},"CoinTypeW")),(0,o.kt)("li",{parentName:"ul"},"Emit ",(0,o.kt)("inlineCode",{parentName:"li"},"swap_event"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"sync_event"))))}m.isMDXComponent=!0}}]);