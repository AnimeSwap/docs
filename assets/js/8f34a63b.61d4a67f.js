"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[400],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>_});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),i=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=i(n),_=o,w=m["".concat(c,".").concat(_)]||m[_]||u[_]||r;return n?a.createElement(w,s(s({ref:t},l),{},{components:n})):a.createElement(w,s({ref:t},l))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,s[1]=p;for(var i=2;i<r;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1216:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>i});var a=n(7462),o=(n(7294),n(3905));const r={},s="Examples for contracts",p={unversionedId:"contracts/Swap/swap_examples",id:"contracts/Swap/swap_examples",title:"Examples for contracts",description:"Update your Move.toml with",source:"@site/docs/contracts/Swap/swap_examples.md",sourceDirName:"contracts/Swap",slug:"/contracts/Swap/swap_examples",permalink:"/docs/contracts/Swap/swap_examples",draft:!1,editUrl:"https://github.com/AnimeSwap/docs/blob/main/docs/contracts/Swap/swap_examples.md",tags:[],version:"current",frontMatter:{},sidebar:"contracts",previous:{title:"Events",permalink:"/docs/contracts/Swap/swap_events"},next:{title:"Entry Functions",permalink:"/docs/contracts/MasterChef/masterchef_api"}},c={},i=[{value:"Swap example",id:"swap-example",level:2},{value:"Flash swap example:",id:"flash-swap-example",level:2}],l={toc:i};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"examples-for-contracts"},"Examples for contracts"),(0,o.kt)("p",null,"Update your ",(0,o.kt)("inlineCode",{parentName:"p"},"Move.toml")," with"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},"[dependencies.AnimeSwap]\ngit = 'https://github.com/AnimeSwap/v1-core.git'\nrev = 'v0.3.0'\nsubdir = 'Swap'\n")),(0,o.kt)("h2",{id:"swap-example"},"Swap example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},"use SwapDeployer::AnimeSwapPoolV1;\nuse SwapDeployer::AnimeSwapPoolV1Library;\nuse SwapDeployer::TestCoinsV1::{BTC, USDT};\nuse std::signer;\nuse aptos_framework::timestamp;\nuse aptos_framework::coin;\n\n...\n\nlet amount_in = 100000;\nlet amount_out_desired = 100000;\nlet (reserve_x, reserve_y, _) = AnimeSwapPoolV1::get_reserves<BTC, USDT>();\nlet (swap_fee, _, _, _) = AnimeSwapPoolV1::get_admin_data();\nlet amount_out = AnimeSwapPoolV1Library::get_amount_out(amount_in, reserve_x, reserve_y, swap_fee);\n\nassert!(amount_out >= amount_out_desired, 1);\nlet coins_in = coin::withdraw<BTC>(account, amount_in);\nlet coins_out = AnimeSwapPoolV1::swap_coins_for_coins_1<BTC, USDT>(account, coins_in, timestamp::now_seconds());\nassert!(coin::value(&coins_out) == amount_out, 2);\n")),(0,o.kt)("h2",{id:"flash-swap-example"},"Flash swap example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-move"},"// loan `amount_in` BTC and repay USDT\nlet amount_in = 100000;\nlet (reserve_x, reserve_y, _) = AnimeSwapPoolV1::get_reserves<BTC, USDT>();\nlet (swap_fee, _, _, _) = AnimeSwapPoolV1::get_admin_data();\nlet amount_out = AnimeSwapPoolV1Library::get_amount_out(amount_in, reserve_x, reserve_y, swap_fee);\n\nlet (coin_out_1, coin_out_2, flash_swap) = AnimeSwapPoolV1::flash_swap<BTC, USDT>(amount_in, 0);\n\n// do something with `coin_out_1` and `coin_out_2`\ncoin::deposit<BTC>(to, coin_out_1);\ncoin::deposit<USDT>(to, coin_out_2);\n\n// repay `amount_out` USDT\nlet repay_coin_2 = coin::withdraw<USDT>(account, amount_out);\nAnimeSwapPoolV1::pay_flash_swap<BTC, USDT>(account, coin::zero<BTC>(), repay_coin_2, flash_swap);\n")))}u.isMDXComponent=!0}}]);