"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2253:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i="Resources",s={unversionedId:"contracts/Sui/Swap/swap_resources",id:"contracts/Sui/Swap/swap_resources",title:"Resources",description:"LiquidityPool",source:"@site/docs/contracts/Sui/Swap/swap_resources.md",sourceDirName:"contracts/Sui/Swap",slug:"/contracts/Sui/Swap/swap_resources",permalink:"/docs/contracts/Sui/Swap/swap_resources",draft:!1,editUrl:"https://github.com/AnimeSwap/docs/blob/main/docs/contracts/Sui/Swap/swap_resources.md",tags:[],version:"current",frontMatter:{},sidebar:"contracts",previous:{title:"Entry Functions",permalink:"/docs/contracts/Sui/Swap/swap_api"},next:{title:"Events",permalink:"/docs/contracts/Sui/Swap/swap_events"}},l={},c=[{value:"LiquidityPool",id:"liquiditypool",level:2},{value:"AdminData",id:"admindata",level:2},{value:"PairInfo",id:"pairinfo",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"resources"},"Resources"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-move"},"// LP-realated resource\nstruct LiquidityPool<phantom X, phantom Y> has key, store {\n    id: UID,\n    coin_x_reserve: Balance<X>,\n    coin_y_reserve: Balance<Y>,\n    lp_coin_reserve: Balance<LPCoin<X, Y>>,\n    lp_supply: Supply<LPCoin<X, Y>>,\n    last_block_timestamp: u64,\n    last_price_x_cumulative: u128,\n    last_price_y_cumulative: u128,\n    k_last: u128,\n    locked: bool,\n}\n\n// Global config resource\nstruct AdminData has store, copy, drop {\n    dao_fee_to: address,\n    admin_address: address,\n    dao_fee: u64,           // 1/(dao_fee+1) comes to dao_fee_to if dao_fee_on\n    swap_fee: u64,          // BP, swap_fee * 1/10000\n    dao_fee_on: bool,       // default: true\n    is_pause: bool,         // pause swap\n}\n\nstruct PairMeta has drop, store, copy {\n    coin_x: String,\n    coin_y: String,\n}\n\nstruct PairInfo has store, copy, drop {\n    pair_list: vector<PairMeta>,\n}\n")),(0,a.kt)("h2",{id:"liquiditypool"},"LiquidityPool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-move"},"struct LiquidityPool<phantom X, phantom Y> has key, store {\n    id: UID,\n    coin_x_reserve: Balance<X>,\n    coin_y_reserve: Balance<Y>,\n    lp_coin_reserve: Balance<LPCoin<X, Y>>,\n    lp_supply: Supply<LPCoin<X, Y>>,\n    last_block_timestamp: u64,\n    last_price_x_cumulative: u128,\n    last_price_y_cumulative: u128,\n    k_last: u128,\n    locked: bool,\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Contains info for lp")),(0,a.kt)("h2",{id:"admindata"},"AdminData"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-move"},"struct AdminData has store, copy, drop {\n    dao_fee_to: address,\n    admin_address: address,\n    dao_fee: u64,           // 1/(dao_fee+1) comes to dao_fee_to if dao_fee_on\n    swap_fee: u64,          // BP, swap_fee * 1/10000\n    dao_fee_on: bool,       // default: true\n    is_pause: bool,         // pause swap\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Contains global swap config"),(0,a.kt)("li",{parentName:"ul"},"Currently ",(0,a.kt)("inlineCode",{parentName:"li"},"swap_fee = 30"),", means ",(0,a.kt)("inlineCode",{parentName:"li"},"0.3%")," swap fee"),(0,a.kt)("li",{parentName:"ul"},"Currently ",(0,a.kt)("inlineCode",{parentName:"li"},"dao_fee = 5"),", means ",(0,a.kt)("inlineCode",{parentName:"li"},"1/6 (0.05%)")," swap fee for dao, and ",(0,a.kt)("inlineCode",{parentName:"li"},"5/6 (0.25%)")," for AMM")),(0,a.kt)("h2",{id:"pairinfo"},"PairInfo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-move"},"struct PairInfo has store, copy, drop {\n    pair_list: vector<PairMeta>,\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Contains all pairs list")))}u.isMDXComponent=!0}}]);