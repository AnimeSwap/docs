"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[364],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=a.createContext({}),p=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,_=d["".concat(u,".").concat(m)]||d[m]||c[m]||r;return t?a.createElement(_,o(o({ref:n},s),{},{components:t})):a.createElement(_,o({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4026:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={},o="Entry Functions",l={unversionedId:"contracts/Swap/swap_api",id:"contracts/Swap/swap_api",title:"Entry Functions",description:"addliquidityentry",source:"@site/docs/contracts/Swap/swap_api.md",sourceDirName:"contracts/Swap",slug:"/contracts/Swap/swap_api",permalink:"/docs/contracts/Swap/swap_api",draft:!1,editUrl:"https://github.com/AnimeSwap/docs/blob/main/docs/contracts/Swap/swap_api.md",tags:[],version:"current",frontMatter:{},sidebar:"contracts",previous:{title:"Overview",permalink:"/docs/contracts/"},next:{title:"Resources",permalink:"/docs/contracts/Swap/swap_resources"}},u={},p=[{value:"add_liquidity_entry",id:"add_liquidity_entry",level:2},{value:"remove_liquidity_entry",id:"remove_liquidity_entry",level:2},{value:"swap_exact_coins_for_coins_entry",id:"swap_exact_coins_for_coins_entry",level:2},{value:"swap_coins_for_exact_coins_entry",id:"swap_coins_for_exact_coins_entry",level:2}],s={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"entry-functions"},"Entry Functions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun add_liquidity_entry<X, Y>(account: &signer, amount_x_desired: u64, amount_y_desired: u64, amount_x_min: u64, amount_y_min: u64)\npublic entry fun remove_liquidity_entry<X, Y>(account: &signer, liquidity: u64, amount_x_min: u64, amount_y_min: u64)\npublic entry fun swap_exact_coins_for_coins_entry<X, Y>(account: &signer, amount_in: u64, amount_out_min: u64)\npublic entry fun swap_exact_coins_for_coins_2_pair_entry<X, Y, Z>(account: &signer, amount_in: u64, amount_out_min: u64)\npublic entry fun swap_exact_coins_for_coins_3_pair_entry<X, Y, Z, W>(account: &signer, amount_in: u64, amount_out_min: u64)\npublic entry fun swap_coins_for_exact_coins_entry<X, Y>(account: &signer, amount_out: u64, amount_in_max: u64)\npublic entry fun swap_coins_for_exact_coins_2_pair_entry<X, Y, Z>(account: &signer, amount_out: u64, amount_in_max: u64)\npublic entry fun swap_coins_for_exact_coins_3_pair_entry<X, Y, Z, W>(account: &signer, amount_out: u64, amount_in_max: u64)\n")),(0,i.kt)("h2",{id:"add_liquidity_entry"},"add_liquidity_entry"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun add_liquidity_entry<X, Y>(account: &signer, amount_x_desired: u64, amount_y_desired: u64, amount_x_min: u64, amount_y_min: u64)\n")),(0,i.kt)("p",null,"Add liquidity for ",(0,i.kt)("inlineCode",{parentName:"p"},"X")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Y")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If pair not exist, transaction will auto ",(0,i.kt)("strong",{parentName:"p"},"Create Pair first"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If pair not exist, it will create pair and add initial liquidity, that is to say, create coin ",(0,i.kt)("inlineCode",{parentName:"li"},"LPCoin<X, Y>")),(0,i.kt)("li",{parentName:"ul"},"At least ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_x_min")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_y_min")," will be added to liquidity, otherwise tx will fail"),(0,i.kt)("li",{parentName:"ul"},"CoinType order not matters, but ",(0,i.kt)("inlineCode",{parentName:"li"},"X")," should match ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_x_desired")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_x_min"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"Y")," should match ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_y_desired")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_y_min")),(0,i.kt)("li",{parentName:"ul"},"Emit ",(0,i.kt)("inlineCode",{parentName:"li"},"pair_created_event"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"mint_event"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sync_event")),(0,i.kt)("li",{parentName:"ul"},"CLI example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"aptos move run --function-id 0x16fe2df00ea7dde4a63409201f7f4e536bde7bb7335526a35d05111e68aa322c::AnimeSwapPoolV1::add_liquidity_entry \\\n--args u64:10000000000 u64:100000000 u64:1 u64:1 \\\n--type-args 0x16fe2df00ea7dde4a63409201f7f4e536bde7bb7335526a35d05111e68aa322c::TestCoinsV1::USDT 0x1::aptos_coin::AptosCoin\n")),(0,i.kt)("h2",{id:"remove_liquidity_entry"},"remove_liquidity_entry"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun remove_liquidity_entry<X, Y>(account: &signer, liquidity: u64, amount_x_min: u64, amount_y_min: u64)\n")),(0,i.kt)("p",null,"Remove liquidity for ",(0,i.kt)("inlineCode",{parentName:"p"},"X")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Y")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Require pair exists, otherwise tx will fail"),(0,i.kt)("li",{parentName:"ul"},"Burn ",(0,i.kt)("inlineCode",{parentName:"li"},"liquidity")," amount ",(0,i.kt)("inlineCode",{parentName:"li"},"LPCoin<X, Y>")),(0,i.kt)("li",{parentName:"ul"},"At least ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_x_min")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_y_min")," is returned, otherwise tx will fail"),(0,i.kt)("li",{parentName:"ul"},"CoinType order not matters, but ",(0,i.kt)("inlineCode",{parentName:"li"},"X")," should match ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_x_min"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"Y")," should match ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_y_min")),(0,i.kt)("li",{parentName:"ul"},"Emit ",(0,i.kt)("inlineCode",{parentName:"li"},"burn_event"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sync_event")),(0,i.kt)("li",{parentName:"ul"},"CLI example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"aptos move run --function-id 0x16fe2df00ea7dde4a63409201f7f4e536bde7bb7335526a35d05111e68aa322c::AnimeSwapPoolV1::remove_liquidity_entry \\\n--args u64:1000 u64:1 u64:1 \\\n--type-args 0x16fe2df00ea7dde4a63409201f7f4e536bde7bb7335526a35d05111e68aa322c::TestCoinsV1::BTC 0x1::aptos_coin::AptosCoin\n")),(0,i.kt)("h2",{id:"swap_exact_coins_for_coins_entry"},"swap_exact_coins_for_coins_entry"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun swap_exact_coins_for_coins_entry<X, Y>(account: &signer, amount_in: u64, amount_out_min: u64)\npublic entry fun swap_exact_coins_for_coins_2_pair_entry<X, Y, Z>(account: &signer, amount_in: u64, amount_out_min: u64)\npublic entry fun swap_exact_coins_for_coins_3_pair_entry<X, Y, Z, W>(account: &signer, amount_in: u64, amount_out_min: u64)\n")),(0,i.kt)("p",null,"Swap ",(0,i.kt)("inlineCode",{parentName:"p"},"X")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinTypeX"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinTypeX")," is the last type-arg"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Require all pairs exist, otherwise tx will fail"),(0,i.kt)("li",{parentName:"ul"},"Input exact ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_in")," ",(0,i.kt)("inlineCode",{parentName:"li"},"X")," and output at least ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_out_min")," ",(0,i.kt)("inlineCode",{parentName:"li"},"CoinTypeX"),", to ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address"),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address is equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"account"),", tx will auto register ",(0,i.kt)("inlineCode",{parentName:"li"},"CoinTypeX")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address"),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address is not equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"account"),", user should register ",(0,i.kt)("inlineCode",{parentName:"li"},"CoinTypeX")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address manually, otherwise tx will fail"),(0,i.kt)("li",{parentName:"ul"},"Emit ",(0,i.kt)("inlineCode",{parentName:"li"},"swap_event"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sync_event")),(0,i.kt)("li",{parentName:"ul"},"CLI example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"aptos move run --function-id 0x16fe2df00ea7dde4a63409201f7f4e536bde7bb7335526a35d05111e68aa322c::AnimeSwapPoolV1::swap_exact_coins_for_coins_entry \\\n--args u64:100 u64:1 \\\n--type-args 0x16fe2df00ea7dde4a63409201f7f4e536bde7bb7335526a35d05111e68aa322c::TestCoinsV1::BTC 0x1::aptos_coin::AptosCoin\n")),(0,i.kt)("h2",{id:"swap_coins_for_exact_coins_entry"},"swap_coins_for_exact_coins_entry"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-move"},"public entry fun swap_coins_for_exact_coins_entry<X, Y>(account: &signer, amount_out: u64, amount_in_max: u64)\npublic entry fun swap_coins_for_exact_coins_2_pair_entry<X, Y, Z>(account: &signer, amount_out: u64, amount_in_max: u64)\npublic entry fun swap_coins_for_exact_coins_3_pair_entry<X, Y, Z, W>(account: &signer, amount_out: u64, amount_in_max: u64)\n")),(0,i.kt)("p",null,"Swap ",(0,i.kt)("inlineCode",{parentName:"p"},"X")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinTypeX"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinTypeX")," is the last type-arg"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Require all pairs exist, otherwise tx will fail"),(0,i.kt)("li",{parentName:"ul"},"Input at least ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_in")," ",(0,i.kt)("inlineCode",{parentName:"li"},"X")," and output exact ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_out_min")," ",(0,i.kt)("inlineCode",{parentName:"li"},"CoinTypeX"),", to ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address"),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address is equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"account"),", tx will auto register ",(0,i.kt)("inlineCode",{parentName:"li"},"CoinTypeX")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address"),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address is not equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"account"),", user should register ",(0,i.kt)("inlineCode",{parentName:"li"},"CoinTypeX")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"to")," address manually, otherwise tx will fail"),(0,i.kt)("li",{parentName:"ul"},"Emit ",(0,i.kt)("inlineCode",{parentName:"li"},"swap_event"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sync_event")),(0,i.kt)("li",{parentName:"ul"},"CLI example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"aptos move run --function-id 0x16fe2df00ea7dde4a63409201f7f4e536bde7bb7335526a35d05111e68aa322c::AnimeSwapPoolV1::swap_coins_for_exact_coins_entry \\\n--args u64:100 u64:1000000000 \\\n--type-args 0x16fe2df00ea7dde4a63409201f7f4e536bde7bb7335526a35d05111e68aa322c::TestCoinsV1::BTC 0x1::aptos_coin::AptosCoin\n")))}c.isMDXComponent=!0}}]);