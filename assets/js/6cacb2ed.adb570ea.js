"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[328],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),f=r,_=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return t?a.createElement(_,i(i({ref:n},p),{},{components:t})):a.createElement(_,i({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},864:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={},i="Resources",s={unversionedId:"contracts/Swap/swap_resources",id:"contracts/Swap/swap_resources",title:"Resources",description:"LiquidityPool",source:"@site/docs/contracts/Swap/swap_resources.md",sourceDirName:"contracts/Swap",slug:"/contracts/Swap/swap_resources",permalink:"/docs/contracts/Swap/swap_resources",draft:!1,editUrl:"https://github.com/AnimeSwap/docs/blob/main/docs/contracts/Swap/swap_resources.md",tags:[],version:"current",frontMatter:{},sidebar:"contracts",previous:{title:"Entry Functions",permalink:"/docs/contracts/Swap/swap_api"},next:{title:"Events",permalink:"/docs/contracts/Swap/swap_events"}},c={},l=[{value:"LiquidityPool",id:"liquiditypool",level:2},{value:"AdminData",id:"admindata",level:2},{value:"PairInfo",id:"pairinfo",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"resources"},"Resources"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"// LP-realated resource\nstruct LiquidityPool<phantom CoinType1, phantom CoinType2, phantom LPCoin> has key {\n    coin_x_reserve: Coin<CoinType1>,\n    coin_y_reserve: Coin<CoinType2>,\n    last_block_timestamp: u64,\n    last_price_x_cumulative: u128,\n    last_price_y_cumulative: u128,\n    k_last: u128,\n    lp_mint_cap: MintCapability<LPCoin>,\n    lp_freeze_cap: FreezeCapability<LPCoin>,\n    lp_burn_cap: BurnCapability<LPCoin>,\n    locked: bool,\n}\n\n// Global config resource\nstruct AdminData has key, drop {\n    signer_cap: SignerCapability,\n    dao_fee_to: address,\n    admin_address: address,\n    dao_fee: u8,   // 1/(dao_fee+1) comes to dao_fee_to if dao_fee_on\n    swap_fee: u64,  // BP, swap_fee * 1/10000\n    dao_fee_on: bool,   // default: true\n    is_pause_flash: bool, // pause flash swap\n}\n\nstruct PairMeta has drop, store, copy {\n    coin_x: TypeInfo,\n    coin_y: TypeInfo,\n    lp_coin: TypeInfo,\n}\n\nstruct PairInfo has key {\n    pair_list: vector<PairMeta>,\n}\n")),(0,r.kt)("h2",{id:"liquiditypool"},"LiquidityPool"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"struct LiquidityPool<phantom CoinType1, phantom CoinType2, phantom LPCoin> has key {\n    coin_x_reserve: Coin<CoinType1>,\n    coin_y_reserve: Coin<CoinType2>,\n    last_block_timestamp: u64,\n    last_price_x_cumulative: u128,\n    last_price_y_cumulative: u128,\n    k_last: u128,\n    lp_mint_cap: MintCapability<LPCoin>,\n    lp_freeze_cap: FreezeCapability<LPCoin>,\n    lp_burn_cap: BurnCapability<LPCoin>,\n    locked: bool,\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"contains info for lp")),(0,r.kt)("h2",{id:"admindata"},"AdminData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"struct AdminData has key, drop {\n    signer_cap: SignerCapability,\n    dao_fee_to: address,\n    admin_address: address,\n    dao_fee: u8,   // 1/(dao_fee+1) comes to dao_fee_to if dao_fee_on\n    swap_fee: u64,  // BP, swap_fee * 1/10000\n    dao_fee_on: bool,   // default: true\n    is_pause_flash: bool, // pause flash swap\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"contains global swap config")),(0,r.kt)("h2",{id:"pairinfo"},"PairInfo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-move"},"struct PairInfo has key {\n    pair_list: vector<PairMeta>,\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"contains all pairs list")))}u.isMDXComponent=!0}}]);